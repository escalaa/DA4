
Stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072d  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000676  00000000  00000000  000009b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000260  00000000  00000000  0000102f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001290  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000385  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  000016b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  88:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <CTCdelay>:

volatile unsigned int ADCvalue;

// CTC delay subroutine
void CTCdelay(unsigned int adc)
{
  90:	9c 01       	movw	r18, r24
	TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10); // CTC mode | set prescaler to 64
  92:	e1 e8       	ldi	r30, 0x81	; 129
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	90 81       	ld	r25, Z
  98:	9b 60       	ori	r25, 0x0B	; 11
  9a:	90 83       	st	Z, r25
	TCNT1 = 0; // intialize counter
  9c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  a0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1A = adc; // compare value
  a4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  a8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  ac:	08 95       	ret

000000ae <ADCinit>:
}

// Initialize ADC
void ADCinit(void)
{
	ADMUX|=(1<<REFS0);
  ae:	ec e7       	ldi	r30, 0x7C	; 124
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 83       	st	Z, r24
	//start conversion | enable adc | enable interrupts | select 128 prescaler | auto trigger enable
	ADCSRA|=(1<<ADSC)|(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADATE);
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8f 6e       	ori	r24, 0xEF	; 239
  c0:	80 83       	st	Z, r24
	ADCSRB=0; //set adc in free running mode
  c2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  c6:	08 95       	ret

000000c8 <__vector_21>:
}

// interrupt ADC
ISR (ADC_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	4f 93       	push	r20
  d8:	5f 93       	push	r21
  da:	6f 93       	push	r22
  dc:	7f 93       	push	r23
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
	ADCvalue=ADC; //reads all 16-bits of ADCH:ADCL (0-1023 from pot)
  ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	PORTB = 0x66; //output first step of stepper motor
  fa:	86 e6       	ldi	r24, 0x66	; 102
  fc:	85 b9       	out	0x05, r24	; 5
	CTCdelay(ADCvalue); //hold this step for the delay (the larger the slower the stepper)
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 102:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 106:	0e 94 48 00 	call	0x90	; 0x90 <CTCdelay>
	PORTB = 0xCC;  //output second step
 10a:	8c ec       	ldi	r24, 0xCC	; 204
 10c:	85 b9       	out	0x05, r24	; 5
	CTCdelay(ADCvalue); //hold for same value
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 116:	0e 94 48 00 	call	0x90	; 0x90 <CTCdelay>
	PORTB = 0x99; //output third step
 11a:	89 e9       	ldi	r24, 0x99	; 153
 11c:	85 b9       	out	0x05, r24	; 5
	CTCdelay(ADCvalue); //hold for same value
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 126:	0e 94 48 00 	call	0x90	; 0x90 <CTCdelay>
	PORTB = 0x33; //output fourth step
 12a:	83 e3       	ldi	r24, 0x33	; 51
 12c:	85 b9       	out	0x05, r24	; 5
	CTCdelay(ADCvalue); //stay for same value
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 132:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 136:	0e 94 48 00 	call	0x90	; 0x90 <CTCdelay>
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <main>:

int main()
{
	DDRC = 0x00; //make PORTC input pins
 15c:	17 b8       	out	0x07, r1	; 7
	DDRD = 0xFF; //make PORTD output pin
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	8a b9       	out	0x0a, r24	; 10
	ADCinit(); //initialize adc
 162:	0e 94 57 00 	call	0xae	; 0xae <ADCinit>
	sei(); //enable global interrupts
 166:	78 94       	sei
 168:	ff cf       	rjmp	.-2      	; 0x168 <main+0xc>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
