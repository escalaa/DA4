
DC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007be  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b3  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002bc  00000000  00000000  000010fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ca  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000122  00000000  00000000  00001802  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  88:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADCinit>:
volatile unsigned int pushed = 0;  // if the motor is on or off
volatile unsigned int ADCvalue;
// Initiate ADC
void ADCinit(void)
{
	ADMUX|=(1<<REFS0);	//use Vcc as ref (0.1uF cap  attached)
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC)|(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADATE); // start conversion | enable adc| enable interrupts | select 128 prescaler | auto trigger enable | ADC0 used
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	8f 6e       	ori	r24, 0xEF	; 239
  a2:	80 83       	st	Z, r24
	ADCSRB=0; //initialize ADC in free running mode
  a4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	TCCR0A|=(1<<COM0A1)|(1<<WGM01)|(1<<WGM00); // the use timer0 in fast PWM mode and set OC0A on bottom then to clear on up counting
  a8:	84 b5       	in	r24, 0x24	; 36
  aa:	83 68       	ori	r24, 0x83	; 131
  ac:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS00); //set the prescaler of 1 to be selected
  ae:	85 b5       	in	r24, 0x25	; 37
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	85 bd       	out	0x25, r24	; 37
  b4:	08 95       	ret

000000b6 <__vector_21>:
}

// Interrupt Potentiometer
ISR (ADC_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
	ADCvalue=ADC;	//reads all 16-bits of ADCH:ADCL (0-1023 from pot)
  c4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  c8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  cc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ADCvalue+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ADCvalue>
	ADCvalue=ADCvalue/4; //divide ADC value by 4 to get 0-225 value
  d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ADCvalue>
  d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ADCvalue+0x1>
  dc:	96 95       	lsr	r25
  de:	87 95       	ror	r24
  e0:	96 95       	lsr	r25
  e2:	87 95       	ror	r24
  e4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ADCvalue+0x1>
  e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ADCvalue>
	OCR0A=ADCvalue; //set this value to the OCR0A register
  ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ADCvalue>
  f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ADCvalue+0x1>
  f4:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	8f e1       	ldi	r24, 0x1F	; 31
  f8:	9e e4       	ldi	r25, 0x4E	; 78
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <__vector_21+0x44>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <__vector_21+0x4a>
 100:	00 00       	nop
	_delay_ms(10); //delay to allow OCR0A to hold
}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <__vector_1>:

// Interrupt Push Button
ISR (INT0_vect)
{	
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
	if(pushed == 0){
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 126:	89 2b       	or	r24, r25
 128:	39 f4       	brne	.+14     	; 0x138 <__vector_1+0x28>
		pushed = 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 136:	05 c0       	rjmp	.+10     	; 0x142 <__vector_1+0x32>
	}
	else{
		OCR0A = 0;
 138:	17 bc       	out	0x27, r1	; 39
		pushed = 0;
 13a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 13e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 142:	8f e1       	ldi	r24, 0x1F	; 31
 144:	9e e4       	ldi	r25, 0x4E	; 78
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <__vector_1+0x36>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <__vector_1+0x3c>
 14c:	00 00       	nop
	}
	_delay_ms(10);
}
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <main>:

int main()
{
	DDRC = 0x00; //make PORTC input pins
 15c:	17 b8       	out	0x07, r1	; 7
	DDRD = 0xFB; //PIND2 as Input and the rest of PORTD as output
 15e:	8b ef       	ldi	r24, 0xFB	; 251
 160:	8a b9       	out	0x0a, r24	; 10
	
	ADCinit(); //initialize 328 (ADC/timers)
 162:	0e 94 48 00 	call	0x90	; 0x90 <ADCinit>
	sei(); //enable global interrupts
 166:	78 94       	sei
 168:	ff cf       	rjmp	.-2      	; 0x168 <main+0xc>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
